package com.storedobject.accounts;

import com.storedobject.core.Columns;
import com.storedobject.core.Invalid_State;

/**
 * Concrete implementation of the Journal Voucher (JV) (See {@link com.storedobject.core.JournalVoucher}).
 * This implementation doesn't have any "owner" (self-owning) and can be used to create generic JV entries.
 * <p>All transactions (debit/credit) must be generated by a "Transaction Generator". You should set
 * it using {@link #setTransactionGenerator(TransactionGenerator)}.</p>
 *
 * @author Syam
 */
public final class JournalVoucher extends com.storedobject.core.JournalVoucher {

    private TransactionGenerator transactionGenerator;

    /**
     * Constructor.
     */
    public JournalVoucher() {
        setOwner(this);
    }

    /**
     * Column definitions.
     *
     * @param columns Column holder. Column definitions to be added to this.
     */
    public static void columns(Columns columns) {
    }

    @Override
    public void generateTransactions() throws Exception {
        if(transactionGenerator == null) {
            throw new Invalid_State("No generator");
        }
        transactionGenerator.generateTransactions(this);
        super.generateTransactions();
    }

    /**
     * Set the "Transaction Generator".
     *
     * @param transactionGenerator Generator to set.
     */
    public void setTransactionGenerator(TransactionGenerator transactionGenerator) {
        this.transactionGenerator = transactionGenerator;
    }

    /**
     * Interface that defines a "Transaction Generator" to generate transactions for a JV.
     *
     * @author Syam
     */
    @FunctionalInterface
    public interface TransactionGenerator {
        /**
         * Generate transactions. All transactions should be created here.
         *
         * @param journalVoucher JV for which transactions are generated.
         * @throws Exception Exception while creating transactions.
         */
        void generateTransactions(JournalVoucher journalVoucher) throws Exception;
    }
}
